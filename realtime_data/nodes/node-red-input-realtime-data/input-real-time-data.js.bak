module.exports = function (RED) {
    "use strict";
    var http = require("follow-redirects").http;
    var urllib = require("url");
    var requestPromise = require('request-promise');
    var Buffer = require('buffer').Buffer;
    function InputRealTimeDataNode(config) {
        RED.nodes.createNode(this, config);
        this.triggerMode = config.triggerMode;
        this.delaySecond = config.delaySecond;
        this.intervalSecond = config.intervalSecond;
        this.method = "GET";
        this.apiUrl = config.apiUrl;
        this.returnType = config.returnType;
        this.reqTimeout = 10000;
        this.enableAuth = config.enableAuth;
        this.authMode = config.authMode;
        this.basicAuthUserName = config.basicAuthUserName;
        this.basicAuthPassword = config.basicAuthPassword;
        this.tokenAuthLoginUrl = config.tokenAuthLoginUrl;
        this.tokenAuthUserName = config.tokenAuthUserName;
        this.tokenAuthPassword = config.tokenAuthPassword;
        var node = this;
        // use to trigger an message to container console log and debug log
        // node.error("Test Error");
        if (this.triggerMode == 'none') {
            this.delaySecond = this.delaySecond * 1000;
            setTimeout(function () { node.emit("input", {}); }, this.delaySecond);
        } else if (this.triggerMode == 'interval') {
            this.intervalSecond = this.intervalSecond * 1000;
            console.log(this.intervalSecond);
            if (RED.settings.verbose) { this.log("interval = " + this.intervalSecond.toString()); }
            this.interval_id = setInterval(function () { node.emit("input", {}); }, this.intervalSecond);
        }

        //input payload - a Javascript Object
        function sendMessage(payload) {
            if (node.returnType == "string") {
                payload = JSON.stringify(payload);
            } else if (node.returnType == "json") {
            }
            var msg = { payload: payload };
            node.send(msg);
        }

        function makeNoAuthApiRequest(noAuthApiUrl) {
            var reqOptions = {
                method: 'GET',
                uri: noAuthApiUrl,
                json: true,
                resolveWithFullResponse: true
            };
            return requestPromise(reqOptions);
        }

        function getNoAuthApiData(noAuthApiUrl) {
            makeNoAuthApiRequest(noAuthApiUrl)
                .then(function (response) {
                    sendMessage(response.body);
                })
                .catch(function (errorResponse) {
                    node.error('Failed to get data from API. ' + errorResponse.message);
                    if (errorResponse.statusCode){
                        node.error('return status code:'+ errorResponse.statusCode);                        
                    }
                });
        }

        function makeBasicAuthAPIRequest(basicAuthAPIUrl, username, password) {
            var auth_data = new Buffer(username + ":" + password).toString('base64');
            var reqOptions = {
                method: 'GET',
                uri: basicAuthAPIUrl,
                headers: { 'Authorization': 'Basic ' + auth_data },
                json: true,
                resolveWithFullResponse: true
            };
            return requestPromise(reqOptions);
        }
        function getBasicAuthApiData(basicAuthAPIUrl, username, password) {
            makeBasicAuthAPIRequest(basicAuthAPIUrl, username, password)
                .then(function (response) {
                    sendMessage(response.body);

                })
                .catch(function (errorResponse) {
                    node.error('Failed to get data from API. ' + errorResponse.message);
                    if (errorResponse.statusCode){
                        node.error('return status code:'+ errorResponse.statusCode);                        
                    }
                });
        }
        
        function getToken(loginUrl, username, password) {
            var reqOptions = {
                method: 'POST',
                uri: loginUrl,
                // headers: {'Authorization': 'Basic ' + auth_data},
                form: { 'username': username, 'password': password },
                json: true,
                resolveWithFullResponse: true
            };
            return requestPromise(reqOptions);
        }

        function processGetTokenResp(response, token) {
            if (response.statusCode == 200 && response.body.status == 'success') {
                token.valid = true;
                token.data = response.body.token;
            }
        }

        function getApiDataRequest(apiUrl, token) {
            var reqOptions = {
                method: 'GET',
                uri: apiUrl,
                headers: { 'token': token.data },
                json: true,
                resolveWithFullResponse: true
            };
            return requestPromise(reqOptions);
        }

        function processGetApiResp(response, token) {
            return { payload: response.body, status: 'success' };
        }

        function getTokenAuthAPIData(loginUrl, apiUrl, username, password, token) {
            if (token.valid == false) {
                console.log('Token is expired. Renew token.');
                tokenAuthRequest = getToken(loginUrl, adminUserName, adminPassword);
                tokenAuthRequest.then(function (response) {
                    processGetTokenResp(response, token);
                    tokenApiRequest = getApiDataRequest(apiUrl, token);
                    tokenApiRequest.then(function (response) {
                        resultData = processGetApiResp(response, token);
                        console.log(resultData.payload);
                    });
                });
            }
            else {
                tokenApiRequest = getApiDataRequest(apiUrl, token);
                tokenApiRequest.then(function (response) {
                    resultData = processGetApiResp(response, token);
                    console.log(resultData.payload);
                }).catch(function (errorResponse) {
                    console.log('Failed to get data from API');
                    console.log(errorResponse.message);
                    console.log(errorResponse.statusCode);
                    token.valid = false;
                    token.data = null;
                });
            }
        }
        node.on('input', function (msg) {

            var apiUrl = node.apiUrl;
            if ((apiUrl.indexOf("http://") != 0)) {
                apiUrl = "http://" + apiUrl;

            }
            var tokenAuthLoginUrl = node.tokenAuthLoginUrl;
            if ((tokenAuthLoginUrl.indexOf("http://") != 0)) {
                tokenAuthLoginUrl = "http://" + tokenAuthLoginUrl;

            }
            // test input value
            // var input = {
            //     //triggerMode: node.triggerMode,
            //     //delaySecond: node.delaySecond,
            //     //intervalSecond: node.intervalSecond,
            //     //method: node.method,
            //     apiUrl: node.apiUrl,
            //     returnType: node.returnType,
            //     reqTimeout: node.reqTimeout,
            //     enableAuth: node.enableAuth,
            //     authMode: node.authMode,
            //     basicAuthUserName: node.basicAuthUserName,
            //     basicAuthPassword: node.basicAuthPassword,
            //     tokenAuthLoginUrl: node.tokenAuthLoginUrl,
            //     tokenAuthUserName: node.tokenAuthUserName,
            //     tokenAuthPassword: node.tokenAuthPassword,
            // };

            if (node.enableAuth == "true") {
                if (node.authMode == "basic") {
                    getBasicAuthApiData(apiUrl, node.basicAuthUserName, node.basicAuthPassword);
                } else if (node.authMode == "token") {
                    // node.token = { valid: false, data: null };
                    // getTokenAuthAPIData(node.tokenAuthLoginUrl, node.apiUrl,
                    //     node.tokenAuthUserName,node.tokenAuthPassword,node.token);
                }
            } else if (node.enableAuth == "false") {
                getNoAuthApiData(apiUrl);
            }
        });
    }
    RED.nodes.registerType("real-time-data", InputRealTimeDataNode);

    InputRealTimeDataNode.prototype.close = function () {
        if (this.interval_id != null) {
            clearInterval(this.interval_id);
        }
    };

    RED.httpAdmin.post("/real-time-data/:id", function (req, res) {
        var node = RED.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive();
                res.sendStatus(200);
            } catch (err) {
                res.sendStatus(500);
                node.error("Cannot process request for node " + node.toString());
            }
        } else {
            res.sendStatus(404);
        }
    });

};
